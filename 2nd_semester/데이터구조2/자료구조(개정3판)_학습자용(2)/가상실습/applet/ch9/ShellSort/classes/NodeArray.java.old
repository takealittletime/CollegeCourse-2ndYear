// Decompiled by Jad v1.5.7d. Copyright 2000 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/SiliconValley/Bridge/8617/jad.html
// Decompiler options: packimports(3)
// Source File Name:   NodeArray.java

import java.awt.*;

class NodeArray
{

    NodeArray(int i)
    {
        init(i);
        //chain = new ListNode[100];
            font = new Font("Serif", 0, 16);
    }

    void init(int i)
    {
        itemNumber = i;
        node = new Node[i];
            //chain = new ListNode[100];
        int k=0;
        for(int j = 0; j < i; j++){
            int m = (int)(Math.random() * 100D);
            node[j] = new Node(j, 50+35*j , 200, (int)m);
            k = m;
        }
        special_node = new Node(100,0,0,0);
    }

    void init(int count, int v[])
    {
        itemNumber = count;
        node = new Node[count];
            //chain = new ListNode[100];
        for(int j = 0; j < count; j++)
            node[j] = new Node(j, 50+35*j , 200, (int)v[j]);
            special_node = new Node(100,0,0,0);
    }

    void init(int a_or_b, int index, int value)
    {
      node[index].setValue(index, value);
    }

    void reset()
    {
        for(int j = 0; j < itemNumber; j++){
            node[j].selected = false;
            node[j].decided = false;
          }
    }

    Node[] nodeList()
    {
        return node;
    }

    void paint(Graphics g)
    {
      for(int i = 0; i < itemNumber; i++)
       node[i].paint(g);
       special_node.paint(g);
    }

    static final int defaultX = 40;
    static final int defaultY = 30;
    private Node node[];
    private int itemNumber;
    int filledNumber;
    int curr_index=0;
    int As=-1;
    int Ae=-1;
    int Bs=-1;
    int Be=-1;
    int Cs=-1;
    int Ce=-1;
    int avail=-1;
    int length=0;
    Node special_node;
    ListNode chain[];
    Color color;
    Font font;
}
